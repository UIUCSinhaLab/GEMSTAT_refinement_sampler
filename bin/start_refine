#!/bin/bash


SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
BASE_DIR=${SCRIPT_DIR}/..

JOB_ID=$1

all_requirements=""
#'(Machine != "hal9013.cs.illinois.edu")'

MAX_IDLEJOBS=100
FANIN_GROUP_SIZE=100


#allows a job to be submit by its config file directly. That allows the user to use tab completion.
if [ -f "${JOB_ID}" ]
then
	JOB_ID=$(basename ${JOB_ID} .bash)
	echo "Submit by file, JOB_ID : ${JOB_ID}"
fi


if [ -f "${BASE_DIR}/REFINEMENT_SETTINGS/${JOB_ID}.bash" ]
then
	source ${BASE_DIR}/REFINEMENT_SETTINGS/${JOB_ID}.bash
else
	echo "I could not find the job configuration file for the job you asked for."
	echo "If you specified it by file, that file must be in the proper"
	echo "directory. (REFINEMENT_SETTINGS)"
	echo "${BASE_DIR}/REFINEMENT_SETTINGS/"
	exit 1
fi

if [ -f "${BASE_DIR}/ENSEMBLE_REFINE/${JOB_ID}/other/everything.dag" ]
then
	echo "EXISTS!: ${BASE_DIR}/ENSEMBLE_REFINE/${JOB_ID}/other/everything.dag"
	exit 1
fi

DO_FANIN=${DO_FANIN:-"True"}


pushd ${BASE_DIR}

JOBDIR=$(${BASE_DIR}/lib/scripts/makejob.bash ${JOB_ID} ENSEMBLE_REFINE)

cat > ${JOBDIR}/other/setup.con << EOF
Universe       = vanilla
Executable     = ${BASE_DIR}/lib/scripts/refinement/setup.bash

input   = /dev/null
output  = ${JOBDIR}/log/setup.out     
error   = ${JOBDIR}/log/setup.error

environment = "BASE=${BASE_DIR} JOBBASE=${JOBDIR} JOBID=${JOB_ID}"

requirements = ${all_requirements}
                                           
Queue
EOF



cat > ${JOBDIR}/other/refine.con << EOF
Universe       = vanilla
Executable     = ${BASE_DIR}/lib/scripts/refinement/single_refine.bash


input   = /dev/null
output  = ${JOBDIR}/log/refine_\$(method_name).out.\$(whichitem)
error   = ${JOBDIR}/log/refine_\$(method_name).error.\$(whichitem)

environment = "BASE=${BASE_DIR} JOBBASE=${JOBDIR} JOBID=${JOB_ID}"

requirements = ${all_requirements}

arguments = ${JOBDIR} \$(whichitem) \$(method_name)
                                                  
Queue 1
EOF

cat > ${JOBDIR}/other/fanin.con << EOF
Universe       = vanilla
Executable     = ${BASE_DIR}/lib/scripts/fanin.bash


input   = /dev/null
output  = ${JOBDIR}/log/fanin_\$(method_name).out.\$(start_f)
error   = ${JOBDIR}/log/fanin_\$(method_name).error.\$(start_f)

environment = "BASE=${BASE_DIR} JOBBASE=${JOBDIR} JOBID=${JOB_ID}"

requirements = ${all_requirements}

arguments = ${JOBDIR} \$(method_name) \$(start_f) \$(end_f)
                                                  
Queue 1
EOF


cat > ${JOBDIR}/other/scores.con << EOF
Universe       = vanilla
Executable     = ${BASE_DIR}/lib/scripts/refinement/scores.bash

input   = /dev/null
output  = ${JOBDIR}/log/scores.out.\$(Process)
error   = ${JOBDIR}/log/scores.error.\$(Process)

environment = "BASE=${BASE_DIR} JOBBASE=${JOBDIR} JOBID=${JOB_ID}"

requirements = ${all_requirements}

arguments = ${JOBDIR} 

Queue 1

EOF

#
#CREATE the method refinement dags
#
for one_method_name in ${method_names}
do
	#THE ACTUAL COMPUTATIONS
	for whichitem in $(seq 0 $((${N_TO_REFINE} - 1)) )
        do
                cat >> ${JOBDIR}/other/refine_${one_method_name}.dag << EOF
JOB refine_${one_method_name}_${whichitem} ${JOBDIR}/other/refine.con
VARS refine_${one_method_name}_${whichitem} method_name="${one_method_name}"
VARS refine_${one_method_name}_${whichitem} whichitem="${whichitem}"
EOF
        done
	
	if [ "${DO_FANIN}" == "True" ]
	then	
	#SETUP THE FANIN as part of the refinement dag
	for START_N in $(seq 0 ${FANIN_GROUP_SIZE} $((${N_TO_REFINE} - 1)) )
        do
                END_N=$((${START_N} + ${FANIN_GROUP_SIZE}))
                cat >> ${JOBDIR}/other/refine_${one_method_name}.dag << EOF
JOB fanin_${one_method_name}_${START_N} ${JOBDIR}/other/fanin.con
VARS fanin_${one_method_name}_${START_N} method_name="${one_method_name}"
VARS fanin_${one_method_name}_${START_N} start_f="${START_N}"
VARS fanin_${one_method_name}_${START_N} end_f="${END_N}"
PRIORITY fanin_${one_method_name}_${START_N} 10
EOF
        done

	#Fanin jobs dependencies on main refine jobs
	for J_START_N in $(seq 0 ${FANIN_GROUP_SIZE} $((${N_TO_REFINE} - 1))  )
        do
		J_END_N=$(( ${J_START_N} + ${FANIN_GROUP_SIZE} - 1 ))
		J_END_N=$(($J_END_N>${N_TO_REFINE} - 1 ? ${N_TO_REFINE} - 1 : $J_END_N))
		for one_job_to_fan_in in $(seq ${J_START_N} ${J_END_N})
		do
		cat >> ${JOBDIR}/other/refine_${one_method_name}.dag << EOF
PARENT  refine_${one_method_name}_${one_job_to_fan_in} CHILD fanin_${one_method_name}_${J_START_N}
EOF
		done
	done

	#dependencies between the steps of fanin
        for C_START_N in $(seq ${FANIN_GROUP_SIZE} ${FANIN_GROUP_SIZE} $((${N_TO_REFINE} - 1)) )
        do
                P_START_N=$((${C_START_N} - ${FANIN_GROUP_SIZE}))
                cat >> ${JOBDIR}/other/refine_${one_method_name}.dag << EOF
PARENT fanin_${one_method_name}_${P_START_N} CHILD fanin_${one_method_name}_${C_START_N}
EOF
        done

	
	fi
	#End of fanin part



done


#
# CREATE the overal DAG
#
cat > ${JOBDIR}/other/everything.dag << EOF
CONFIG ${JOBDIR}/other/dagman.config
JOB setup ${JOBDIR}/other/setup.con
JOB scores ${JOBDIR}/other/scores.con
EOF

for one_method_name in ${method_names}
do

cat >> ${JOBDIR}/other/everything.dag << EOF
SUBDAG EXTERNAL refine_${one_method_name} ${JOBDIR}/other/refine_${one_method_name}.dag
PARENT setup CHILD refine_${one_method_name}
PARENT refine_${one_method_name} CHILD scores
EOF

done



cat > ${JOBDIR}/other/dagman.config << EOF
DAGMAN_LOG_ON_NFS_IS_ERROR = False
EOF

condor_submit_dag -maxidle ${MAX_IDLEJOBS} -batch-name ${JOB_ID} ${JOBDIR}/other/everything.dag
